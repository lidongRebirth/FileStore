学习网站：https://github.com/jeasonlzy/okhttp-OkGo/wiki/OkGo

项目中在ProjectApp中配置初始化
1、一定要配置，只需配置一次就行
OkHttpClient.Builder builder = new OkHttpClient.Builder();
        //log相关
        HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor("OkGo");
        loggingInterceptor.setPrintLevel(HttpLoggingInterceptor.Level.BODY);        //log打印级别，决定了log显示的详细程度
        loggingInterceptor.setColorLevel(Level.INFO);                               //log颜色级别，决定了log在控制台显示的颜色
        builder.addInterceptor(loggingInterceptor);                                 //添加OkGo默认debug日志

        //超时时间设置，默认60秒
        builder.readTimeout(10000, TimeUnit.MILLISECONDS);      //全局的读取超时时间
        builder.writeTimeout(10000, TimeUnit.MILLISECONDS);     //全局的写入超时时间
        builder.connectTimeout(10000, TimeUnit.MILLISECONDS);   //全局的连接超时时间
        builder.cookieJar(new CookieJarImpl(new SPCookieStore(this)));  ////使用sp保持cookie，如果cookie不过期，则一直有效

        OkGo.getInstance().init(this)                           //必须调用初始化
                .setOkHttpClient(builder.build())               //建议设置OkHttpClient，不设置会使用默认的
                .setCacheMode(CacheMode.NO_CACHE)               //全局统一缓存模式，默认不使用缓存，可以不传
                .setCacheTime(CacheEntity.CACHE_NEVER_EXPIRE)   //全局统一缓存时间，默认永不过期，可以不传
                .setRetryCount(0)                               //全局统一超时重连次数，默认为三次，那么最差的情况会请求4次(一次原始请求，三次重连请求)，不需要可以设置为0
                .addCommonHeaders(new ProjectRequest().getHttpHeader());	 //全局公共头

        参考网址：https://github.com/jeasonlzy/okhttp-OkGo/wiki/Init#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE

2、get请求方式，返回jason格式数据，parpams后参数是通过网址？targetid=targetid&targettype=targettype的方式进行传递的
OkGo.<BaseBean>get(RequestAddress.URL_CANCELLIKE)
                .params("targetid", targetid)
                .params("targettype", targettype + "")
                .tag("取消点赞").execute(new JsonCallBack<BaseBean>(BaseBean.class, context) {
            @Override
            public void onSuccess(Response<BaseBean> response) {
                if (response != null && response.body() != null) {
                    onNetFinishListener.cancelLikeSuccess(response.body());
                } else {
                    onNetFinishListener.cancelLikeFail("");
                }
            }
            @Override
            public void onError(Response<BaseBean> response) {
                super.onError(response);
                onNetFinishListener.cancelLikeFail(response.message());
            }
        });
2、
